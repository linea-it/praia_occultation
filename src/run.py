#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

import argparse
import os
import traceback
import os
import argparse
from datetime import datetime
from run_nima import start_nima
from run_praia_occ import start_praia_occ

parser = argparse.ArgumentParser()
parser.add_argument("name", help="Object name without spaces")
parser.add_argument("start_date", help="Initial date. example '2018-JAN-01'")
parser.add_argument(
    "final_date", help="Final date. example '2018-DEC-31 23:59:01'")
parser.add_argument("step",
                    help="steps in seconds. Example 60")
parser.add_argument("--leap_sec", default="naif0012.tls",
                    help="Name of the Leap Seconds file, it must be in the directory /data. example naif0012.tls")
parser.add_argument("--bsp_planetary", default="de435.bsp",
                    help="Name of the BSP Planetary file, it must be in the directory /data. example de435.bsp")
parser.add_argument("--bsp_object", default=None,
                    help="Name of the Asteroid BSP file, it must be in the directory /data. example Eris.bsp. default <name>.bsp")
parser.add_argument("-p", "--path", default=None,
                    required=False,
                    help="Path where the inputs are and where the outputs will be. must be the path as it is mounted on the volume, should be used when it is not possible to mount the volume as /data. example the inputs are in /archive/asteroids/Eris and this path is mounted inside the container the parameter --path must have this value --path /archive/asteroids/Eris, the program will create a link from this path to /data.")


if __name__ == "__main__":
    t0 = datetime.now()

    args = parser.parse_args()

    # Verifica o path onde o programa está sendo executado
    app_path = os.environ.get("APP_PATH")
    original_cwd = os.getcwd()
    print("Current Path: %s" % original_cwd)

    if original_cwd != app_path:
        print("Changing the work directory")
        os.chdir(app_path)
        print("Current Path: %s" % os.getcwd())

    try:

        # Tratar o diretório dos inputs
        if args.path is not None and os.path.exists(os.environ.get("DIR_DATA")) is False:
            # Se for passado o parametro --path e o diretório /tmp/data nao existir
            # Cria um link simbolico do --path para /tmp/data (não pode ser /data por causa de permissão.)
            # Altera a variavel de ambiente DIR_DATA com o valor /tmp/data.
            # é necessário criar este link por que os paths para os arquivos
            # não podem ser muito grande limite de 50 caracteres para o PRAIA_OCC.
            os.symlink(args.path, os.environ.get("DIR_DATA"))

        if args.path is None and os.path.exists(os.environ.get("DIR_DATA")) is False:
            # Se não for passado o parametro --path e o diretório /data não existir o programa para a execução.
            raise Exception(
                "No data directory was found. use the volume mounting the data in the /data directory or run the run.py script with parameter --path in which case the directory passed as parameter must be a mounted volume.")

        # Diretorio de Dados dentro do container.
        data_dir = os.environ.get("DIR_DATA").rstrip('/')
        print("DATA DIR: [%s]" % data_dir)

        # Tratar os Parametros de entrada
        name = args.name.replace(' ', '').replace('_', '')
        start_date = args.start_date
        final_date = args.final_date
        step = args.step
        leap_sec_filename = args.leap_sec
        bsp_planetary_filename = args.bsp_planetary
        bsp_object_filename = args.bsp_object

        # Até aqui preparou o ambiente para a execução do Nima e Praia OCC em sequencia.

        # Executar o NIMA
        print("Running NIMAv7")
        files = start_nima()

        # Depois de executar o path, é necessário voltar para o path /app
        os.chdir(app_path)
        print("NIMAv7 is Done!")

        bsp_nima_filename = "%s_nima.bsp" % name
        bsp_nima = os.path.join(data_dir, bsp_nima_filename)
        if not os.path.exists(bsp_nima):
            # Se o arquivo bsp nima não for criado interronpe a execução do programa.
            raise Exception("Failed to create BSP NIMA. [%s]" % bsp_nima)

        if args.bsp_object is None:
            # Se o usuario não especificou um arquivo BSP para o objeto será usado o BSP gerado pelo NIMA.
            bsp_object_filename = bsp_nima_filename
            print("Using BSP generated by NIMA.")

        # Executar o PRAIA OCC
        print("Running PRAIA OCC")
        occultation_file = start_praia_occ(
            name, start_date, final_date, step,
            leap_sec_filename, bsp_planetary_filename, bsp_object_filename
        )

        print("PRAIA OCC is Done!")
        if not os.path.exists(occultation_file):
            raise Exception(
                "Failed to create Occultation table. [%s]" % occultation_file)

        print("Occultation table created: [%s]" % occultation_file)

    except Exception as e:
        print(e)
        traceback.print_exc()

    finally:

        # Volta para o diretório original
        os.chdir(original_cwd)

        t1 = datetime.now()
        td = t1 - t0
        print("Predict Occultation Done in %s" % td)


# Exemplo usando o script Run.py
# docker run -it --rm --volume /home/glauber/linea/1999RB216:/home/glauber/linea/1999RB216 --network host -e DB_URI=postgresql+psycopg2://postgres:postgres@172.18.0.2:5432/tno_v2 linea/praiaoccultation:v2.5 python run.py 1999RB216 2018-JAN-01 2019-JAN-01 600 --path /home/glauber/linea/1999RB216
