#!/usr/bin/python2.7
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("asteroid", help="Asteroid name without spaces. example: 1999RB216")
parser.add_argument("diameter", help="Shade diameter (int or float) ")
parser.add_argument("table", help="Table file generated by PRAIA_occultation. example: g4_occ_data_JOHNSTON_table")
parser.add_argument("--mapstyle", default=3, help='Predefined map features using the Basemap templates. ' \
    '1 - black and white, 2 - blue water and orange earth, 3 - shadedrelief, 4 - bluemarble, 5 - etope .' \
    'The default value is 3. See https://matplotlib.org/basemap/users/geography.html'
    )
parser.add_argument("--sitearq", default="sites.dat", help="Name of the file that contains the list of sites to print on the map.")    
parser.add_argument("--erro", default=60, help="Inserts a dotted line with the estimated error. Should be provided in mas. default value is 60")    
parser.add_argument("--log", default="maps.log", help="Name of the log file with the output of , the log will be in the data directory.")
args = parser.parse_args()


from mapa import geramapa
import os
import shutil
import sys

data_dir = os.environ.get("DIR_DATA")
asteroid = args.asteroid
diameter = args.diameter
table = args.table
mapstyle = args.mapstyle
sitesarq = args.sitearq
erro = args.erro
log = args.log

table_file = os.path.join(data_dir, table)
log_file = os.path.join(data_dir, log)

orig_stdout = sys.stdout
f = open(log_file, 'w')
sys.stdout = f


if not os.path.exists(table_file):
    print("Table file not found [%s]." % table_file)
    exit(1)

if not os.path.exists(sitesarq):
    print("file not found: sitearq [ %s ]" % sitesarq)
    exit(1)

geramapa(
    str(asteroid), 
    float(diameter), 
    table_file, 
    # n=10, 
    mapstyle=int(mapstyle), 
    sitearq=sitesarq, 
    erro=erro)

result_files = []
for arq in os.listdir(os.getcwd()):
    if os.path.isfile(arq) and arq.lower().endswith(".png"):
        result = os.path.join(data_dir, os.path.basename(arq))
        shutil.move(arq, result)
        os.chmod(result, 0664)
        result_files.append(result)

print("%s Maps were generated" % len(result_files))

sys.stdout = orig_stdout
f.close()
exit(0)